// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ratelimit.proto

package gubernator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Algorithm int32

const (
	// Token bucket algorithm https://en.wikipedia.org/wiki/Token_bucket
	Algorithm_TOKEN_BUCKET Algorithm = 0
	// Leaky bucket algorithm https://en.wikipedia.org/wiki/Leaky_bucket
	Algorithm_LEAKY_BUCKET Algorithm = 1
)

var Algorithm_name = map[int32]string{
	0: "TOKEN_BUCKET",
	1: "LEAKY_BUCKET",
}
var Algorithm_value = map[string]int32{
	"TOKEN_BUCKET": 0,
	"LEAKY_BUCKET": 1,
}

func (x Algorithm) String() string {
	return proto.EnumName(Algorithm_name, int32(x))
}
func (Algorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Behavior int32

const (
	// BATCHING is the default behavior. This enables batching requests which protects the
	// service from thundering herd. IE: When a service experiences spikes of unexpected high
	// volume requests.
	//
	// Using this option introduces a small amount of latency depending on
	// the `batchWait` setting. Defaults to around 500 Microseconds of additional
	// latency in low throughput situations. For high volume loads, batching can reduce
	// the overall load on the system substantially.
	Behavior_BATCHING Behavior = 0
	// Disables batching. Use this for super low latency rate limit requests when
	// thundering herd is not a concern but latency of requests is of paramount importance.
	Behavior_NO_BATCHING Behavior = 1
	// Enables Global caching of the rate limit. Use this if the rate limit applies globally to
	// all ingress requests. (IE: Throttle hundreds of thousands of requests to an entire
	// datacenter or cluster of http servers)
	//
	// Using this option gubernator will continue to use a single peer as the rate limit coordinator
	// to increment and manage the state of the rate limit, however the result of the rate limit is
	// distributed to each peer and cached locally. A rate limit request received from any peer in the
	// cluster will first check the local cache for a rate limit answer, if it exists the peer will
	// immediately return the answer to the client and asynchronously forward the aggregate hits to
	// the peer coordinator. Because of GLOBALS async nature we lose some accuracy in rate limit
	// reporting, which may result in allowing some requests beyond the chosen rate limit. However we
	// gain massive performance as every request coming into the system does not have to wait for a
	// single peer to decide if the rate limit has been reached.
	Behavior_GLOBAL Behavior = 2
)

var Behavior_name = map[int32]string{
	0: "BATCHING",
	1: "NO_BATCHING",
	2: "GLOBAL",
}
var Behavior_value = map[string]int32{
	"BATCHING":    0,
	"NO_BATCHING": 1,
	"GLOBAL":      2,
}

func (x Behavior) String() string {
	return proto.EnumName(Behavior_name, int32(x))
}
func (Behavior) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type Status int32

const (
	Status_UNDER_LIMIT Status = 0
	Status_OVER_LIMIT  Status = 1
)

var Status_name = map[int32]string{
	0: "UNDER_LIMIT",
	1: "OVER_LIMIT",
}
var Status_value = map[string]int32{
	"UNDER_LIMIT": 0,
	"OVER_LIMIT":  1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// Must specify at least one Request
type Requests struct {
	Requests []*Request `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (m *Requests) Reset()                    { *m = Requests{} }
func (m *Requests) String() string            { return proto.CompactTextString(m) }
func (*Requests) ProtoMessage()               {}
func (*Requests) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Requests) GetRequests() []*Request {
	if m != nil {
		return m.Requests
	}
	return nil
}

// RateLimits returned are in the same order as the Requests
type RateLimits struct {
	RateLimits []*RateLimit `protobuf:"bytes,1,rep,name=rate_limits,json=rateLimits" json:"rate_limits,omitempty"`
}

func (m *RateLimits) Reset()                    { *m = RateLimits{} }
func (m *RateLimits) String() string            { return proto.CompactTextString(m) }
func (*RateLimits) ProtoMessage()               {}
func (*RateLimits) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RateLimits) GetRateLimits() []*RateLimit {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

type Request struct {
	// The name of the rate limit IE: 'requests_per_second', 'gets_per_minute`
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Uniquely identifies this rate limit IE: 'ip:10.2.10.7' or 'account:123445'
	UniqueKey string `protobuf:"bytes,2,opt,name=unique_key,json=uniqueKey" json:"unique_key,omitempty"`
	// Rate limit requests optionally specify the number of hits a request adds to the matched limit. If Hit
	// is zero, the request returns the current limit, but does not increment the hit count.
	Hits int64 `protobuf:"varint,3,opt,name=hits" json:"hits,omitempty"`
	// The number of requests that can occur for the duration of the rate limit
	Limit int64 `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	// The duration of the rate limit in milliseconds
	// Second = 1000 Milliseconds
	// Minute = 60000 Milliseconds
	// Hour = 3600000 Milliseconds
	Duration int64 `protobuf:"varint,5,opt,name=duration" json:"duration,omitempty"`
	// The algorithm used to calculate the rate limit. The algorithm may change on
	// subsequent requests, when this occurs any previous rate limit hit counts are reset.
	Algorithm Algorithm `protobuf:"varint,6,opt,name=algorithm,enum=pb.gubernator.Algorithm" json:"algorithm,omitempty"`
	// The behavior of the rate limit in gubernator.
	Behavior Behavior `protobuf:"varint,7,opt,name=behavior,enum=pb.gubernator.Behavior" json:"behavior,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Request) GetUniqueKey() string {
	if m != nil {
		return m.UniqueKey
	}
	return ""
}

func (m *Request) GetHits() int64 {
	if m != nil {
		return m.Hits
	}
	return 0
}

func (m *Request) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Request) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Request) GetAlgorithm() Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return Algorithm_TOKEN_BUCKET
}

func (m *Request) GetBehavior() Behavior {
	if m != nil {
		return m.Behavior
	}
	return Behavior_BATCHING
}

type RateLimit struct {
	// The status of the rate limit.
	Status Status `protobuf:"varint,1,opt,name=status,enum=pb.gubernator.Status" json:"status,omitempty"`
	// The currently configured request limit (Identical to RateLimitRequest.rate_limit_config.limit).
	CurrentLimit int64 `protobuf:"varint,2,opt,name=current_limit,json=currentLimit" json:"current_limit,omitempty"`
	// This is the number of requests remaining before the limit is hit.
	LimitRemaining int64 `protobuf:"varint,3,opt,name=limit_remaining,json=limitRemaining" json:"limit_remaining,omitempty"`
	// This is the time when the rate limit span will be reset, provided as a unix timestamp in milliseconds.
	ResetTime int64 `protobuf:"varint,4,opt,name=reset_time,json=resetTime" json:"reset_time,omitempty"`
	// Contains the error; If set all other values should be ignored
	Error string `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
	// This is additional metadata that a client might find useful. (IE: Additional headers, corrdinator ownership, etc..)
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RateLimit) Reset()                    { *m = RateLimit{} }
func (m *RateLimit) String() string            { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()               {}
func (*RateLimit) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RateLimit) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNDER_LIMIT
}

func (m *RateLimit) GetCurrentLimit() int64 {
	if m != nil {
		return m.CurrentLimit
	}
	return 0
}

func (m *RateLimit) GetLimitRemaining() int64 {
	if m != nil {
		return m.LimitRemaining
	}
	return 0
}

func (m *RateLimit) GetResetTime() int64 {
	if m != nil {
		return m.ResetTime
	}
	return 0
}

func (m *RateLimit) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RateLimit) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type HealthCheckReq struct {
}

func (m *HealthCheckReq) Reset()                    { *m = HealthCheckReq{} }
func (m *HealthCheckReq) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckReq) ProtoMessage()               {}
func (*HealthCheckReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type HealthCheckResp struct {
	// Valid entries are 'healthy' or 'unhealthy'
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// If 'unhealthy', message indicates the problem
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	// The number of peers we know about
	PeerCount int32 `protobuf:"varint,3,opt,name=peer_count,json=peerCount" json:"peer_count,omitempty"`
}

func (m *HealthCheckResp) Reset()                    { *m = HealthCheckResp{} }
func (m *HealthCheckResp) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckResp) ProtoMessage()               {}
func (*HealthCheckResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *HealthCheckResp) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *HealthCheckResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HealthCheckResp) GetPeerCount() int32 {
	if m != nil {
		return m.PeerCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Requests)(nil), "pb.gubernator.Requests")
	proto.RegisterType((*RateLimits)(nil), "pb.gubernator.RateLimits")
	proto.RegisterType((*Request)(nil), "pb.gubernator.Request")
	proto.RegisterType((*RateLimit)(nil), "pb.gubernator.RateLimit")
	proto.RegisterType((*HealthCheckReq)(nil), "pb.gubernator.HealthCheckReq")
	proto.RegisterType((*HealthCheckResp)(nil), "pb.gubernator.HealthCheckResp")
	proto.RegisterEnum("pb.gubernator.Algorithm", Algorithm_name, Algorithm_value)
	proto.RegisterEnum("pb.gubernator.Behavior", Behavior_name, Behavior_value)
	proto.RegisterEnum("pb.gubernator.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RateLimitServiceV1 service

type RateLimitServiceV1Client interface {
	// Given a list of rate limit requests, return the rate limits of each.
	GetRateLimits(ctx context.Context, in *Requests, opts ...grpc.CallOption) (*RateLimits, error)
	// This method is for round trip benchmarking and can be used by
	// the client to determine connectivity to the server
	HealthCheck(ctx context.Context, in *HealthCheckReq, opts ...grpc.CallOption) (*HealthCheckResp, error)
}

type rateLimitServiceV1Client struct {
	cc *grpc.ClientConn
}

func NewRateLimitServiceV1Client(cc *grpc.ClientConn) RateLimitServiceV1Client {
	return &rateLimitServiceV1Client{cc}
}

func (c *rateLimitServiceV1Client) GetRateLimits(ctx context.Context, in *Requests, opts ...grpc.CallOption) (*RateLimits, error) {
	out := new(RateLimits)
	err := grpc.Invoke(ctx, "/pb.gubernator.RateLimitServiceV1/GetRateLimits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitServiceV1Client) HealthCheck(ctx context.Context, in *HealthCheckReq, opts ...grpc.CallOption) (*HealthCheckResp, error) {
	out := new(HealthCheckResp)
	err := grpc.Invoke(ctx, "/pb.gubernator.RateLimitServiceV1/HealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RateLimitServiceV1 service

type RateLimitServiceV1Server interface {
	// Given a list of rate limit requests, return the rate limits of each.
	GetRateLimits(context.Context, *Requests) (*RateLimits, error)
	// This method is for round trip benchmarking and can be used by
	// the client to determine connectivity to the server
	HealthCheck(context.Context, *HealthCheckReq) (*HealthCheckResp, error)
}

func RegisterRateLimitServiceV1Server(s *grpc.Server, srv RateLimitServiceV1Server) {
	s.RegisterService(&_RateLimitServiceV1_serviceDesc, srv)
}

func _RateLimitServiceV1_GetRateLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Requests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceV1Server).GetRateLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.gubernator.RateLimitServiceV1/GetRateLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceV1Server).GetRateLimits(ctx, req.(*Requests))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitServiceV1_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceV1Server).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.gubernator.RateLimitServiceV1/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceV1Server).HealthCheck(ctx, req.(*HealthCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RateLimitServiceV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.gubernator.RateLimitServiceV1",
	HandlerType: (*RateLimitServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRateLimits",
			Handler:    _RateLimitServiceV1_GetRateLimits_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _RateLimitServiceV1_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ratelimit.proto",
}

func init() { proto.RegisterFile("ratelimit.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x5d, 0x6f, 0xda, 0x48,
	0x14, 0x8d, 0x21, 0x21, 0xf8, 0x12, 0x3e, 0x32, 0xda, 0x4d, 0xbc, 0x28, 0x59, 0x21, 0xaf, 0xb4,
	0xcb, 0x22, 0x2d, 0x28, 0x44, 0xbb, 0xda, 0xa6, 0x52, 0x25, 0xa0, 0x88, 0x44, 0x10, 0x90, 0x26,
	0x24, 0x52, 0xfb, 0x62, 0x0d, 0xe4, 0x0a, 0xac, 0x60, 0x9b, 0x8c, 0xc7, 0x48, 0x79, 0xab, 0xfa,
	0x17, 0xfa, 0x7f, 0xfa, 0x27, 0xfa, 0xde, 0xa7, 0xbe, 0xf7, 0x2f, 0x54, 0x33, 0xfe, 0x48, 0xa0,
	0x4d, 0xdf, 0xe6, 0x9e, 0x7b, 0xee, 0xb9, 0xc3, 0x39, 0x8c, 0xa1, 0xc8, 0x99, 0xc0, 0x85, 0xed,
	0xd8, 0xa2, 0xbe, 0xe4, 0x9e, 0xf0, 0x48, 0x7e, 0x39, 0xa9, 0xcf, 0x82, 0x09, 0x72, 0x97, 0x09,
	0x8f, 0x97, 0x8f, 0x66, 0x9e, 0x37, 0x5b, 0x60, 0x83, 0x2d, 0xed, 0x06, 0x73, 0x5d, 0x4f, 0x30,
	0x61, 0x7b, 0xae, 0x1f, 0x92, 0xcd, 0x57, 0x90, 0xa5, 0x78, 0x1f, 0xa0, 0x2f, 0x7c, 0xd2, 0x84,
	0x2c, 0x8f, 0xce, 0x86, 0x56, 0x49, 0x57, 0x73, 0xcd, 0x83, 0xfa, 0x9a, 0x56, 0x3d, 0xa2, 0xd2,
	0x84, 0x67, 0xf6, 0x00, 0x28, 0x13, 0x38, 0x90, 0xfb, 0x7d, 0xf2, 0x02, 0x72, 0xf2, 0x36, 0x96,
	0xba, 0x4e, 0x2c, 0x62, 0x6c, 0x8a, 0xc4, 0x7c, 0x0a, 0x3c, 0x19, 0x35, 0xbf, 0x6a, 0xb0, 0x1b,
	0xc9, 0x13, 0x02, 0xdb, 0x2e, 0x73, 0xd0, 0xd0, 0x2a, 0x5a, 0x55, 0xa7, 0xea, 0x4c, 0x8e, 0x01,
	0x02, 0xd7, 0xbe, 0x0f, 0xd0, 0xba, 0xc3, 0x07, 0x23, 0xa5, 0x3a, 0x7a, 0x88, 0xf4, 0xf1, 0x41,
	0x8e, 0xcc, 0xe5, 0xca, 0x74, 0x45, 0xab, 0xa6, 0xa9, 0x3a, 0x93, 0x5f, 0x60, 0x47, 0x5d, 0xc4,
	0xd8, 0x56, 0x60, 0x58, 0x90, 0x32, 0x64, 0x6f, 0x03, 0xae, 0x4c, 0x30, 0x76, 0x54, 0x23, 0xa9,
	0xc9, 0x7f, 0xa0, 0xb3, 0xc5, 0xcc, 0xe3, 0xb6, 0x98, 0x3b, 0x46, 0xa6, 0xa2, 0x55, 0x0b, 0xdf,
	0xdd, 0xbe, 0x15, 0xf7, 0xe9, 0x23, 0x95, 0x9c, 0x42, 0x76, 0x82, 0x73, 0xb6, 0xb2, 0x3d, 0x6e,
	0xec, 0xaa, 0xb1, 0xc3, 0x8d, 0xb1, 0x76, 0xd4, 0xa6, 0x09, 0xd1, 0xfc, 0x98, 0x02, 0x3d, 0xf1,
	0x82, 0xfc, 0x03, 0x19, 0x5f, 0x30, 0x11, 0xf8, 0xea, 0x57, 0x17, 0x9a, 0xbf, 0x6e, 0x08, 0x5c,
	0xa9, 0x26, 0x8d, 0x48, 0xe4, 0x0f, 0xc8, 0x4f, 0x03, 0xce, 0xd1, 0x15, 0xa1, 0xd9, 0xca, 0x91,
	0x34, 0xdd, 0x8b, 0xc0, 0x50, 0xf3, 0x2f, 0x28, 0xaa, 0xa6, 0xc5, 0xd1, 0x61, 0xb6, 0x6b, 0xbb,
	0xb3, 0xc8, 0x9f, 0x82, 0x82, 0x69, 0x8c, 0x4a, 0x73, 0x39, 0xfa, 0x28, 0x2c, 0x61, 0x3b, 0x18,
	0xd9, 0xa5, 0x2b, 0x64, 0x6c, 0x3b, 0x28, 0x8d, 0x44, 0xce, 0x3d, 0xae, 0xfc, 0xd2, 0x69, 0x58,
	0x90, 0x36, 0x64, 0x1d, 0x14, 0xec, 0x96, 0x09, 0x66, 0x64, 0x54, 0xd2, 0x7f, 0x3e, 0x97, 0x74,
	0xfd, 0x32, 0x22, 0x76, 0x5d, 0xc1, 0x1f, 0x68, 0x32, 0x57, 0x7e, 0x09, 0xf9, 0xb5, 0x16, 0x29,
	0x41, 0x5a, 0xe6, 0x1b, 0x26, 0x2f, 0x8f, 0x72, 0xf9, 0x8a, 0x2d, 0x02, 0x8c, 0x32, 0x0f, 0x8b,
	0xb3, 0xd4, 0xff, 0x9a, 0x59, 0x82, 0xc2, 0x39, 0xb2, 0x85, 0x98, 0x77, 0xe6, 0x38, 0xbd, 0xa3,
	0x78, 0x6f, 0x4e, 0xa0, 0xb8, 0x86, 0xf8, 0x4b, 0x72, 0xb0, 0xe6, 0xab, 0x9e, 0x18, 0x68, 0xc0,
	0xae, 0x83, 0xbe, 0xcf, 0x66, 0xb1, 0x70, 0x5c, 0x4a, 0x33, 0x96, 0x88, 0xdc, 0x9a, 0x7a, 0x81,
	0x2b, 0x94, 0x61, 0x3b, 0x54, 0x97, 0x48, 0x47, 0x02, 0xb5, 0x06, 0xe8, 0xc9, 0x7f, 0x80, 0x94,
	0x60, 0x6f, 0x3c, 0xea, 0x77, 0x87, 0x56, 0xfb, 0xba, 0xd3, 0xef, 0x8e, 0x4b, 0x5b, 0x12, 0x19,
	0x74, 0x5b, 0xfd, 0x37, 0x31, 0xa2, 0xd5, 0xfe, 0x85, 0x6c, 0x9c, 0x3e, 0xd9, 0x83, 0x6c, 0xbb,
	0x35, 0xee, 0x9c, 0x5f, 0x0c, 0x7b, 0xa5, 0x2d, 0x52, 0x84, 0xdc, 0x70, 0x64, 0x25, 0x80, 0x46,
	0x00, 0x32, 0xbd, 0xc1, 0xa8, 0xdd, 0x1a, 0x94, 0x52, 0xb5, 0xbf, 0x21, 0x13, 0x66, 0x2e, 0x69,
	0xd7, 0xc3, 0xd7, 0x5d, 0x6a, 0x0d, 0x2e, 0x2e, 0x2f, 0xe4, 0x8e, 0x02, 0xc0, 0xe8, 0x26, 0xa9,
	0xb5, 0xe6, 0x67, 0x0d, 0x48, 0xe2, 0xf5, 0x15, 0xf2, 0x95, 0x3d, 0xc5, 0x9b, 0x13, 0xc2, 0x20,
	0xdf, 0x43, 0xf1, 0xe4, 0x79, 0x1e, 0xfe, 0xf8, 0x39, 0xfb, 0xe5, 0xdf, 0x9e, 0x0b, 0xce, 0x37,
	0x8f, 0xde, 0x7f, 0xfa, 0xf2, 0x21, 0x75, 0x60, 0xee, 0x37, 0x56, 0x27, 0x8d, 0x35, 0xb9, 0x33,
	0xad, 0x46, 0x10, 0x72, 0x4f, 0x0c, 0x27, 0xc7, 0x1b, 0x3a, 0xeb, 0xf1, 0x94, 0x7f, 0xff, 0x59,
	0xdb, 0x5f, 0x9a, 0x87, 0x6a, 0xd7, 0x3e, 0x29, 0xca, 0x5d, 0x4f, 0x9a, 0xed, 0xe2, 0x5b, 0x78,
	0x1c, 0x7b, 0xa7, 0x69, 0x93, 0x8c, 0xfa, 0x7a, 0x9d, 0x7e, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xfb,
	0xa3, 0xe5, 0xb9, 0xfd, 0x04, 0x00, 0x00,
}
