// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peers.proto

/*
Package gubernator is a generated protocol buffer package.

It is generated from these files:
	peers.proto
	ratelimit.proto

It has these top-level messages:
	GetPeerRateLimitsReq
	GetPeerRateLimitsResp
	UpdatePeerGlobalsReq
	UpdatePeerGlobalsResp
	Requests
	RateLimits
	Request
	RateLimit
	HealthCheckReq
	HealthCheckResp
*/
package gubernator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetPeerRateLimitsReq struct {
	// Must specify at least one RateLimit. The peer that recives this request MUST be authoritative for
	// each rate_limit[x].unique_key provided, as the peer will not forward the request to any other peers
	Requests []*Request `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (m *GetPeerRateLimitsReq) Reset()                    { *m = GetPeerRateLimitsReq{} }
func (m *GetPeerRateLimitsReq) String() string            { return proto.CompactTextString(m) }
func (*GetPeerRateLimitsReq) ProtoMessage()               {}
func (*GetPeerRateLimitsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetPeerRateLimitsReq) GetRequests() []*Request {
	if m != nil {
		return m.Requests
	}
	return nil
}

type GetPeerRateLimitsResp struct {
	// Responses are in the same order as they appeared in the PeerRateLimitRequests
	RateLimits []*RateLimit `protobuf:"bytes,1,rep,name=rate_limits,json=rateLimits" json:"rate_limits,omitempty"`
}

func (m *GetPeerRateLimitsResp) Reset()                    { *m = GetPeerRateLimitsResp{} }
func (m *GetPeerRateLimitsResp) String() string            { return proto.CompactTextString(m) }
func (*GetPeerRateLimitsResp) ProtoMessage()               {}
func (*GetPeerRateLimitsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetPeerRateLimitsResp) GetRateLimits() []*RateLimit {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

type UpdatePeerGlobalsReq struct {
	// Must specify at least one RateLimit
	RateLimits []*RateLimit `protobuf:"bytes,1,rep,name=rate_limits,json=rateLimits" json:"rate_limits,omitempty"`
}

func (m *UpdatePeerGlobalsReq) Reset()                    { *m = UpdatePeerGlobalsReq{} }
func (m *UpdatePeerGlobalsReq) String() string            { return proto.CompactTextString(m) }
func (*UpdatePeerGlobalsReq) ProtoMessage()               {}
func (*UpdatePeerGlobalsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdatePeerGlobalsReq) GetRateLimits() []*RateLimit {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

type UpdatePeerGlobalsResp struct {
}

func (m *UpdatePeerGlobalsResp) Reset()                    { *m = UpdatePeerGlobalsResp{} }
func (m *UpdatePeerGlobalsResp) String() string            { return proto.CompactTextString(m) }
func (*UpdatePeerGlobalsResp) ProtoMessage()               {}
func (*UpdatePeerGlobalsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*GetPeerRateLimitsReq)(nil), "pb.gubernator.GetPeerRateLimitsReq")
	proto.RegisterType((*GetPeerRateLimitsResp)(nil), "pb.gubernator.GetPeerRateLimitsResp")
	proto.RegisterType((*UpdatePeerGlobalsReq)(nil), "pb.gubernator.UpdatePeerGlobalsReq")
	proto.RegisterType((*UpdatePeerGlobalsResp)(nil), "pb.gubernator.UpdatePeerGlobalsResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PeersServiceV1 service

type PeersServiceV1Client interface {
	// Used by peers to relay batches of requests to an authoritative peer
	GetPeerRateLimits(ctx context.Context, in *GetPeerRateLimitsReq, opts ...grpc.CallOption) (*GetPeerRateLimitsResp, error)
	// Used by peers send global rate limit updates to other peers
	UpdatePeerGlobals(ctx context.Context, in *UpdatePeerGlobalsReq, opts ...grpc.CallOption) (*UpdatePeerGlobalsResp, error)
}

type peersServiceV1Client struct {
	cc *grpc.ClientConn
}

func NewPeersServiceV1Client(cc *grpc.ClientConn) PeersServiceV1Client {
	return &peersServiceV1Client{cc}
}

func (c *peersServiceV1Client) GetPeerRateLimits(ctx context.Context, in *GetPeerRateLimitsReq, opts ...grpc.CallOption) (*GetPeerRateLimitsResp, error) {
	out := new(GetPeerRateLimitsResp)
	err := grpc.Invoke(ctx, "/pb.gubernator.PeersServiceV1/GetPeerRateLimits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peersServiceV1Client) UpdatePeerGlobals(ctx context.Context, in *UpdatePeerGlobalsReq, opts ...grpc.CallOption) (*UpdatePeerGlobalsResp, error) {
	out := new(UpdatePeerGlobalsResp)
	err := grpc.Invoke(ctx, "/pb.gubernator.PeersServiceV1/UpdatePeerGlobals", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PeersServiceV1 service

type PeersServiceV1Server interface {
	// Used by peers to relay batches of requests to an authoritative peer
	GetPeerRateLimits(context.Context, *GetPeerRateLimitsReq) (*GetPeerRateLimitsResp, error)
	// Used by peers send global rate limit updates to other peers
	UpdatePeerGlobals(context.Context, *UpdatePeerGlobalsReq) (*UpdatePeerGlobalsResp, error)
}

func RegisterPeersServiceV1Server(s *grpc.Server, srv PeersServiceV1Server) {
	s.RegisterService(&_PeersServiceV1_serviceDesc, srv)
}

func _PeersServiceV1_GetPeerRateLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerRateLimitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeersServiceV1Server).GetPeerRateLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.gubernator.PeersServiceV1/GetPeerRateLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeersServiceV1Server).GetPeerRateLimits(ctx, req.(*GetPeerRateLimitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeersServiceV1_UpdatePeerGlobals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePeerGlobalsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeersServiceV1Server).UpdatePeerGlobals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.gubernator.PeersServiceV1/UpdatePeerGlobals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeersServiceV1Server).UpdatePeerGlobals(ctx, req.(*UpdatePeerGlobalsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeersServiceV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.gubernator.PeersServiceV1",
	HandlerType: (*PeersServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeerRateLimits",
			Handler:    _PeersServiceV1_GetPeerRateLimits_Handler,
		},
		{
			MethodName: "UpdatePeerGlobals",
			Handler:    _PeersServiceV1_UpdatePeerGlobals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peers.proto",
}

func init() { proto.RegisterFile("peers.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x48, 0x4d, 0x2d,
	0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x48, 0xd2, 0x4b, 0x2f, 0x4d, 0x4a,
	0x2d, 0xca, 0x4b, 0x2c, 0xc9, 0x2f, 0x92, 0xe2, 0x2f, 0x4a, 0x2c, 0x49, 0xcd, 0xc9, 0xcc, 0xcd,
	0x2c, 0x81, 0xc8, 0x2b, 0x79, 0x71, 0x89, 0xb8, 0xa7, 0x96, 0x04, 0xa4, 0xa6, 0x16, 0x05, 0x25,
	0x96, 0xa4, 0xfa, 0x80, 0x64, 0x8a, 0x83, 0x52, 0x0b, 0x85, 0x8c, 0xb8, 0x38, 0x8a, 0x52, 0x0b,
	0x4b, 0x53, 0x8b, 0x4b, 0x8a, 0x25, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0xc4, 0xf4, 0x50, 0x8c,
	0xd2, 0x0b, 0x82, 0x48, 0x07, 0xc1, 0xd5, 0x29, 0x05, 0x71, 0x89, 0x62, 0x31, 0xab, 0xb8, 0x40,
	0xc8, 0x92, 0x8b, 0x1b, 0x64, 0x6f, 0x3c, 0xd8, 0x62, 0x98, 0x79, 0x12, 0xe8, 0xe6, 0xc1, 0xf4,
	0x04, 0x71, 0x15, 0xc1, 0xb5, 0x2b, 0x05, 0x72, 0x89, 0x84, 0x16, 0xa4, 0x24, 0x96, 0xa4, 0x82,
	0x8c, 0x75, 0xcf, 0xc9, 0x4f, 0x4a, 0xcc, 0x01, 0xbb, 0x8f, 0x02, 0x23, 0xc5, 0xb9, 0x44, 0xb1,
	0x18, 0x59, 0x5c, 0x60, 0x74, 0x85, 0x91, 0x8b, 0x0f, 0x24, 0x56, 0x1c, 0x9c, 0x5a, 0x54, 0x96,
	0x99, 0x9c, 0x1a, 0x66, 0x28, 0x94, 0xc0, 0x25, 0x88, 0xe1, 0x25, 0x21, 0x65, 0x34, 0x6b, 0xb0,
	0x05, 0xa0, 0x94, 0x0a, 0x61, 0x45, 0xc5, 0x05, 0x4a, 0x0c, 0x20, 0x1b, 0x30, 0x5c, 0x83, 0x61,
	0x03, 0xb6, 0x20, 0xc0, 0xb0, 0x01, 0xab, 0xa7, 0x94, 0x18, 0x9c, 0xf8, 0xa3, 0xb8, 0x10, 0xaa,
	0x1a, 0x18, 0x19, 0x93, 0xd8, 0xc0, 0x51, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xcd,
	0x30, 0x74, 0x29, 0x02, 0x00, 0x00,
}
