# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import ratelimit_pb2 as ratelimit__pb2


class RateLimitServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetRateLimits = channel.unary_unary(
        '/pb.gubernator.RateLimitService/GetRateLimits',
        request_serializer=ratelimit__pb2.RateLimitRequestList.SerializeToString,
        response_deserializer=ratelimit__pb2.RateLimitResponseList.FromString,
        )
    self.HealthCheck = channel.unary_unary(
        '/pb.gubernator.RateLimitService/HealthCheck',
        request_serializer=ratelimit__pb2.HealthCheckRequest.SerializeToString,
        response_deserializer=ratelimit__pb2.HealthCheckResponse.FromString,
        )


class RateLimitServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetRateLimits(self, request, context):
    """Given a list of rate limits return the rates and statuses of each request.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def HealthCheck(self, request, context):
    """This method is for round trip benchmarking and can be used by
    the client to determine connectivity to the server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RateLimitServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetRateLimits': grpc.unary_unary_rpc_method_handler(
          servicer.GetRateLimits,
          request_deserializer=ratelimit__pb2.RateLimitRequestList.FromString,
          response_serializer=ratelimit__pb2.RateLimitResponseList.SerializeToString,
      ),
      'HealthCheck': grpc.unary_unary_rpc_method_handler(
          servicer.HealthCheck,
          request_deserializer=ratelimit__pb2.HealthCheckRequest.FromString,
          response_serializer=ratelimit__pb2.HealthCheckResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pb.gubernator.RateLimitService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
