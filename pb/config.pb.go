// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetPeersRequest struct {
}

func (m *GetPeersRequest) Reset()                    { *m = GetPeersRequest{} }
func (m *GetPeersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPeersRequest) ProtoMessage()               {}
func (*GetPeersRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type GetPeersResponse struct {
	Peers []string `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *GetPeersResponse) Reset()                    { *m = GetPeersResponse{} }
func (m *GetPeersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPeersResponse) ProtoMessage()               {}
func (*GetPeersResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetPeersResponse) GetPeers() []string {
	if m != nil {
		return m.Peers
	}
	return nil
}

func init() {
	proto.RegisterType((*GetPeersRequest)(nil), "pb.gubernator.GetPeersRequest")
	proto.RegisterType((*GetPeersResponse)(nil), "pb.gubernator.GetPeersResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConfigServer service

type ConfigServerClient interface {
	// Given a rate limit descriptor return a descriptor status
	GetPeers(ctx context.Context, in *GetPeersRequest, opts ...grpc.CallOption) (*GetPeersResponse, error)
}

type configServerClient struct {
	cc *grpc.ClientConn
}

func NewConfigServerClient(cc *grpc.ClientConn) ConfigServerClient {
	return &configServerClient{cc}
}

func (c *configServerClient) GetPeers(ctx context.Context, in *GetPeersRequest, opts ...grpc.CallOption) (*GetPeersResponse, error) {
	out := new(GetPeersResponse)
	err := grpc.Invoke(ctx, "/pb.gubernator.ConfigServer/GetPeers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigServer service

type ConfigServerServer interface {
	// Given a rate limit descriptor return a descriptor status
	GetPeers(context.Context, *GetPeersRequest) (*GetPeersResponse, error)
}

func RegisterConfigServerServer(s *grpc.Server, srv ConfigServerServer) {
	s.RegisterService(&_ConfigServer_serviceDesc, srv)
}

func _ConfigServer_GetPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServerServer).GetPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.gubernator.ConfigServer/GetPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServerServer).GetPeers(ctx, req.(*GetPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.gubernator.ConfigServer",
	HandlerType: (*ConfigServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeers",
			Handler:    _ConfigServer_GetPeers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}

func init() { proto.RegisterFile("config.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x48, 0xd2, 0x4b, 0x2f, 0x4d,
	0x4a, 0x2d, 0xca, 0x4b, 0x2c, 0xc9, 0x2f, 0x52, 0x12, 0xe4, 0xe2, 0x77, 0x4f, 0x2d, 0x09, 0x48,
	0x4d, 0x2d, 0x2a, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0xd2, 0xe0, 0x12, 0x40, 0x08,
	0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x89, 0x70, 0xb1, 0x16, 0x80, 0x04, 0x24, 0x18, 0x15,
	0x98, 0x35, 0x38, 0x83, 0x20, 0x1c, 0xa3, 0x58, 0x2e, 0x1e, 0x67, 0xb0, 0xd9, 0xc1, 0xa9, 0x45,
	0x65, 0xa9, 0x45, 0x42, 0xbe, 0x5c, 0x1c, 0x30, 0x9d, 0x42, 0x72, 0x7a, 0x28, 0x16, 0xe9, 0xa1,
	0xd9, 0x22, 0x25, 0x8f, 0x53, 0x1e, 0x62, 0xa5, 0x12, 0x83, 0x13, 0x7b, 0x14, 0x53, 0x41, 0x52,
	0x03, 0x23, 0x63, 0x12, 0x1b, 0xd8, 0xe9, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x5b,
	0x54, 0x07, 0xca, 0x00, 0x00, 0x00,
}
