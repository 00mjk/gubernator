// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetPeersRequest struct {
}

func (m *GetPeersRequest) Reset()                    { *m = GetPeersRequest{} }
func (m *GetPeersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPeersRequest) ProtoMessage()               {}
func (*GetPeersRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type GetPeersResponse struct {
	Peers []string `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *GetPeersResponse) Reset()                    { *m = GetPeersResponse{} }
func (m *GetPeersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPeersResponse) ProtoMessage()               {}
func (*GetPeersResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetPeersResponse) GetPeers() []string {
	if m != nil {
		return m.Peers
	}
	return nil
}

type NoOpRequest struct {
}

func (m *NoOpRequest) Reset()                    { *m = NoOpRequest{} }
func (m *NoOpRequest) String() string            { return proto.CompactTextString(m) }
func (*NoOpRequest) ProtoMessage()               {}
func (*NoOpRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type NoOpResponse struct {
}

func (m *NoOpResponse) Reset()                    { *m = NoOpResponse{} }
func (m *NoOpResponse) String() string            { return proto.CompactTextString(m) }
func (*NoOpResponse) ProtoMessage()               {}
func (*NoOpResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func init() {
	proto.RegisterType((*GetPeersRequest)(nil), "pb.gubernator.GetPeersRequest")
	proto.RegisterType((*GetPeersResponse)(nil), "pb.gubernator.GetPeersResponse")
	proto.RegisterType((*NoOpRequest)(nil), "pb.gubernator.NoOpRequest")
	proto.RegisterType((*NoOpResponse)(nil), "pb.gubernator.NoOpResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConfigService service

type ConfigServiceClient interface {
	// TODO: Add a test for this method
	// Given a rate limit descriptor return a descriptor status
	GetPeers(ctx context.Context, in *GetPeersRequest, opts ...grpc.CallOption) (*GetPeersResponse, error)
	// This method is for benchmark testing only
	NoOp(ctx context.Context, in *NoOpRequest, opts ...grpc.CallOption) (*NoOpResponse, error)
}

type configServiceClient struct {
	cc *grpc.ClientConn
}

func NewConfigServiceClient(cc *grpc.ClientConn) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) GetPeers(ctx context.Context, in *GetPeersRequest, opts ...grpc.CallOption) (*GetPeersResponse, error) {
	out := new(GetPeersResponse)
	err := grpc.Invoke(ctx, "/pb.gubernator.ConfigService/GetPeers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) NoOp(ctx context.Context, in *NoOpRequest, opts ...grpc.CallOption) (*NoOpResponse, error) {
	out := new(NoOpResponse)
	err := grpc.Invoke(ctx, "/pb.gubernator.ConfigService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigService service

type ConfigServiceServer interface {
	// TODO: Add a test for this method
	// Given a rate limit descriptor return a descriptor status
	GetPeers(context.Context, *GetPeersRequest) (*GetPeersResponse, error)
	// This method is for benchmark testing only
	NoOp(context.Context, *NoOpRequest) (*NoOpResponse, error)
}

func RegisterConfigServiceServer(s *grpc.Server, srv ConfigServiceServer) {
	s.RegisterService(&_ConfigService_serviceDesc, srv)
}

func _ConfigService_GetPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.gubernator.ConfigService/GetPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetPeers(ctx, req.(*GetPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_NoOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).NoOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.gubernator.ConfigService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).NoOp(ctx, req.(*NoOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.gubernator.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeers",
			Handler:    _ConfigService_GetPeers_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ConfigService_NoOp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}

func init() { proto.RegisterFile("config.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x48, 0xd2, 0x4b, 0x2f, 0x4d,
	0x4a, 0x2d, 0xca, 0x4b, 0x2c, 0xc9, 0x2f, 0x52, 0x12, 0xe4, 0xe2, 0x77, 0x4f, 0x2d, 0x09, 0x48,
	0x4d, 0x2d, 0x2a, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0xd2, 0xe0, 0x12, 0x40, 0x08,
	0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x89, 0x70, 0xb1, 0x16, 0x80, 0x04, 0x24, 0x18, 0x15,
	0x98, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x25, 0x5e, 0x2e, 0x6e, 0xbf, 0x7c, 0xff, 0x02, 0x98, 0x46,
	0x3e, 0x2e, 0x1e, 0x08, 0x17, 0xa2, 0xc9, 0x68, 0x21, 0x23, 0x17, 0xaf, 0x33, 0xd8, 0xee, 0xe0,
	0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x5f, 0x2e, 0x0e, 0x98, 0xd1, 0x42, 0x72, 0x7a, 0x28,
	0x2e, 0xd1, 0x43, 0x73, 0x86, 0x94, 0x3c, 0x4e, 0x79, 0x88, 0xf1, 0x4a, 0x0c, 0x42, 0x8e, 0x5c,
	0x2c, 0x20, 0x0b, 0x85, 0xa4, 0xd0, 0x94, 0x22, 0x39, 0x4a, 0x4a, 0x1a, 0xab, 0x1c, 0xcc, 0x08,
	0x27, 0xf6, 0x28, 0xa6, 0x82, 0xa4, 0x06, 0x46, 0xc6, 0x24, 0x36, 0x70, 0xf0, 0x18, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x2a, 0xdf, 0xff, 0x58, 0x2e, 0x01, 0x00, 0x00,
}
